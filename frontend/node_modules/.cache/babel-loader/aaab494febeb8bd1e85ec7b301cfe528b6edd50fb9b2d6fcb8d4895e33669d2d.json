{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marco\\\\OneDrive\\\\Desktop\\\\PROJECTS\\\\PBL_FINAL\\\\FileSystemSimulator\\\\frontend\\\\src\\\\components\\\\Terminal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Terminal.css';\nimport { fileSystemService } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Terminal = ({\n  currentPath,\n  onCommandExecuted\n}) => {\n  _s();\n  const [commandHistory, setCommandHistory] = useState([]);\n  const [currentCommand, setCurrentCommand] = useState('');\n  const [historyIndex, setHistoryIndex] = useState(-1);\n  const [outputHistory, setOutputHistory] = useState([{\n    text: `Welcome to File System Terminal\\nCurrent directory: ${currentPath}\\n`,\n    type: 'system'\n  }]);\n  const terminalRef = useRef(null);\n  const inputRef = useRef(null);\n  useEffect(() => {\n    if (terminalRef.current) {\n      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;\n    }\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [outputHistory]);\n\n  // Update output when currentPath changes\n  useEffect(() => {\n    if (currentPath) {\n      setOutputHistory(prev => [...prev, {\n        text: `Current directory: ${currentPath}`,\n        type: 'system'\n      }]);\n    }\n  }, [currentPath]);\n  const executeCommand = async command => {\n    const trimmedCommand = command.trim();\n    if (!trimmedCommand) return;\n\n    // Add command to history\n    setCommandHistory(prev => [...prev, trimmedCommand]);\n    setOutputHistory(prev => [...prev, {\n      text: `$ ${trimmedCommand}`,\n      type: 'command'\n    }]);\n\n    // Get the current token\n    const token = localStorage.getItem('token');\n    if (!token) {\n      setOutputHistory(prev => [...prev, {\n        text: 'Error: Not authenticated. Please log in.',\n        type: 'error'\n      }]);\n      return;\n    }\n\n    // Parse command\n    const [cmd, ...args] = trimmedCommand.split(' ');\n    try {\n      let response;\n      let shouldRefresh = false;\n      switch (cmd.toLowerCase()) {\n        case 'ls':\n          response = await fileSystemService.listFiles();\n          shouldRefresh = true;\n          break;\n        case 'cd':\n          if (!args[0]) {\n            setOutputHistory(prev => [...prev, {\n              text: 'Usage: cd <directory>',\n              type: 'error'\n            }]);\n            return;\n          }\n          response = await fileSystemService.changeDirectory(args[0]);\n          shouldRefresh = true;\n          break;\n        case 'mkdir':\n          if (!args[0]) {\n            setOutputHistory(prev => [...prev, {\n              text: 'Usage: mkdir <directory>',\n              type: 'error'\n            }]);\n            return;\n          }\n          response = await fileSystemService.createDirectory(args[0]);\n          shouldRefresh = true;\n          break;\n        case 'touch':\n        case 'create':\n          if (!args[0]) {\n            setOutputHistory(prev => [...prev, {\n              text: 'Usage: create <filename>',\n              type: 'error'\n            }]);\n            return;\n          }\n          response = await fileSystemService.createFile(args[0], '');\n          shouldRefresh = true;\n          break;\n        case 'rm':\n          if (!args[0]) {\n            setOutputHistory(prev => [...prev, {\n              text: 'Usage: rm <filename>',\n              type: 'error'\n            }]);\n            return;\n          }\n          response = await fileSystemService.deleteFile(args[0]);\n          shouldRefresh = true;\n          break;\n        case 'rmdir':\n          if (!args[0]) {\n            setOutputHistory(prev => [...prev, {\n              text: 'Usage: rmdir <directory>',\n              type: 'error'\n            }]);\n            return;\n          }\n          response = await fileSystemService.deleteDirectory(args[0]);\n          shouldRefresh = true;\n          break;\n        case 'pwd':\n          response = await fileSystemService.getCurrentDirectory();\n          break;\n        case 'clear':\n          setOutputHistory([{\n            text: `Welcome to File System Terminal\\nCurrent directory: ${currentPath}\\n`,\n            type: 'system'\n          }]);\n          return;\n        case 'help':\n          const helpText = `\nAvailable commands:\n  ls              - List directory contents\n  cd <dir>        - Change directory\n  mkdir <dir>     - Create directory\n  touch/create <file> - Create file\n  rm <file>       - Remove file\n  rmdir <dir>     - Remove directory\n  pwd             - Print working directory\n  clear           - Clear terminal\n  help            - Show this help message\n`;\n          setOutputHistory(prev => [...prev, {\n            text: helpText,\n            type: 'output'\n          }]);\n          return;\n        default:\n          setOutputHistory(prev => [...prev, {\n            text: `Command not found: ${cmd}. Type 'help' for available commands.`,\n            type: 'error'\n          }]);\n          return;\n      }\n      if (response && response.data) {\n        setOutputHistory(prev => [...prev, {\n          text: typeof response.data === 'string' ? response.data : JSON.stringify(response.data, null, 2),\n          type: 'output'\n        }]);\n\n        // Call the refresh callback if the command was successful and should trigger a refresh\n        if (shouldRefresh && onCommandExecuted) {\n          onCommandExecuted();\n        }\n      }\n    } catch (error) {\n      setOutputHistory(prev => [...prev, {\n        text: `Error: ${error.message}`,\n        type: 'error'\n      }]);\n    }\n  };\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      executeCommand(currentCommand);\n      setCurrentCommand('');\n      setHistoryIndex(-1);\n    } else if (e.key === 'ArrowUp') {\n      e.preventDefault();\n      if (commandHistory.length > 0) {\n        const newIndex = historyIndex + 1;\n        if (newIndex < commandHistory.length) {\n          setHistoryIndex(newIndex);\n          setCurrentCommand(commandHistory[commandHistory.length - 1 - newIndex]);\n        }\n      }\n    } else if (e.key === 'ArrowDown') {\n      e.preventDefault();\n      if (historyIndex > 0) {\n        const newIndex = historyIndex - 1;\n        setHistoryIndex(newIndex);\n        setCurrentCommand(commandHistory[commandHistory.length - 1 - newIndex]);\n      } else if (historyIndex === 0) {\n        setHistoryIndex(-1);\n        setCurrentCommand('');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"terminal-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"terminal-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Terminal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-button\",\n        onClick: () => document.querySelector('.terminal-wrapper').style.display = 'none',\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"terminal-window\",\n      ref: terminalRef,\n      children: [outputHistory.map((output, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `terminal-line ${output.type}`,\n        children: output.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"terminal-input-line\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"prompt\",\n          children: \"$\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: inputRef,\n          type: \"text\",\n          value: currentCommand,\n          onChange: e => setCurrentCommand(e.target.value),\n          onKeyDown: handleKeyDown,\n          className: \"terminal-input\",\n          spellCheck: \"false\",\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 9\n  }, this);\n};\n_s(Terminal, \"3XYQVKnyHYxVaqaMHsiYJZdCEjo=\");\n_c = Terminal;\nexport default Terminal;\nvar _c;\n$RefreshReg$(_c, \"Terminal\");","map":{"version":3,"names":["React","useState","useEffect","useRef","fileSystemService","jsxDEV","_jsxDEV","Terminal","currentPath","onCommandExecuted","_s","commandHistory","setCommandHistory","currentCommand","setCurrentCommand","historyIndex","setHistoryIndex","outputHistory","setOutputHistory","text","type","terminalRef","inputRef","current","scrollTop","scrollHeight","focus","prev","executeCommand","command","trimmedCommand","trim","token","localStorage","getItem","cmd","args","split","response","shouldRefresh","toLowerCase","listFiles","changeDirectory","createDirectory","createFile","deleteFile","deleteDirectory","getCurrentDirectory","helpText","data","JSON","stringify","error","message","handleKeyDown","e","key","preventDefault","length","newIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","document","querySelector","style","display","ref","map","output","index","value","onChange","target","onKeyDown","spellCheck","autoFocus","_c","$RefreshReg$"],"sources":["C:/Users/marco/OneDrive/Desktop/PROJECTS/PBL_FINAL/FileSystemSimulator/frontend/src/components/Terminal.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './Terminal.css';\r\nimport { fileSystemService } from '../api';\r\n\r\nconst Terminal = ({ currentPath, onCommandExecuted }) => {\r\n    const [commandHistory, setCommandHistory] = useState([]);\r\n    const [currentCommand, setCurrentCommand] = useState('');\r\n    const [historyIndex, setHistoryIndex] = useState(-1);\r\n    const [outputHistory, setOutputHistory] = useState([{ text: `Welcome to File System Terminal\\nCurrent directory: ${currentPath}\\n`, type: 'system' }]);\r\n    const terminalRef = useRef(null);\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (terminalRef.current) {\r\n            terminalRef.current.scrollTop = terminalRef.current.scrollHeight;\r\n        }\r\n        if (inputRef.current) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [outputHistory]);\r\n\r\n    // Update output when currentPath changes\r\n    useEffect(() => {\r\n        if (currentPath) {\r\n            setOutputHistory(prev => [...prev, { text: `Current directory: ${currentPath}`, type: 'system' }]);\r\n        }\r\n    }, [currentPath]);\r\n\r\n    const executeCommand = async (command) => {\r\n        const trimmedCommand = command.trim();\r\n        if (!trimmedCommand) return;\r\n\r\n        // Add command to history\r\n        setCommandHistory(prev => [...prev, trimmedCommand]);\r\n        setOutputHistory(prev => [...prev, { text: `$ ${trimmedCommand}`, type: 'command' }]);\r\n\r\n        // Get the current token\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            setOutputHistory(prev => [...prev, { text: 'Error: Not authenticated. Please log in.', type: 'error' }]);\r\n            return;\r\n        }\r\n\r\n        // Parse command\r\n        const [cmd, ...args] = trimmedCommand.split(' ');\r\n\r\n        try {\r\n            let response;\r\n            let shouldRefresh = false;\r\n\r\n            switch (cmd.toLowerCase()) {\r\n                case 'ls':\r\n                    response = await fileSystemService.listFiles();\r\n                    shouldRefresh = true;\r\n                    break;\r\n                case 'cd':\r\n                    if (!args[0]) {\r\n                        setOutputHistory(prev => [...prev, { text: 'Usage: cd <directory>', type: 'error' }]);\r\n                        return;\r\n                    }\r\n                    response = await fileSystemService.changeDirectory(args[0]);\r\n                    shouldRefresh = true;\r\n                    break;\r\n                case 'mkdir':\r\n                    if (!args[0]) {\r\n                        setOutputHistory(prev => [...prev, { text: 'Usage: mkdir <directory>', type: 'error' }]);\r\n                        return;\r\n                    }\r\n                    response = await fileSystemService.createDirectory(args[0]);\r\n                    shouldRefresh = true;\r\n                    break;\r\n                case 'touch':\r\n                case 'create':\r\n                    if (!args[0]) {\r\n                        setOutputHistory(prev => [...prev, { text: 'Usage: create <filename>', type: 'error' }]);\r\n                        return;\r\n                    }\r\n                    response = await fileSystemService.createFile(args[0], '');\r\n                    shouldRefresh = true;\r\n                    break;\r\n                case 'rm':\r\n                    if (!args[0]) {\r\n                        setOutputHistory(prev => [...prev, { text: 'Usage: rm <filename>', type: 'error' }]);\r\n                        return;\r\n                    }\r\n                    response = await fileSystemService.deleteFile(args[0]);\r\n                    shouldRefresh = true;\r\n                    break;\r\n                case 'rmdir':\r\n                    if (!args[0]) {\r\n                        setOutputHistory(prev => [...prev, { text: 'Usage: rmdir <directory>', type: 'error' }]);\r\n                        return;\r\n                    }\r\n                    response = await fileSystemService.deleteDirectory(args[0]);\r\n                    shouldRefresh = true;\r\n                    break;\r\n                case 'pwd':\r\n                    response = await fileSystemService.getCurrentDirectory();\r\n                    break;\r\n                case 'clear':\r\n                    setOutputHistory([{ text: `Welcome to File System Terminal\\nCurrent directory: ${currentPath}\\n`, type: 'system' }]);\r\n                    return;\r\n                case 'help':\r\n                    const helpText = `\r\nAvailable commands:\r\n  ls              - List directory contents\r\n  cd <dir>        - Change directory\r\n  mkdir <dir>     - Create directory\r\n  touch/create <file> - Create file\r\n  rm <file>       - Remove file\r\n  rmdir <dir>     - Remove directory\r\n  pwd             - Print working directory\r\n  clear           - Clear terminal\r\n  help            - Show this help message\r\n`;\r\n                    setOutputHistory(prev => [...prev, { text: helpText, type: 'output' }]);\r\n                    return;\r\n                default:\r\n                    setOutputHistory(prev => [...prev, { text: `Command not found: ${cmd}. Type 'help' for available commands.`, type: 'error' }]);\r\n                    return;\r\n            }\r\n\r\n            if (response && response.data) {\r\n                setOutputHistory(prev => [...prev, { \r\n                    text: typeof response.data === 'string' ? response.data : JSON.stringify(response.data, null, 2), \r\n                    type: 'output' \r\n                }]);\r\n\r\n                // Call the refresh callback if the command was successful and should trigger a refresh\r\n                if (shouldRefresh && onCommandExecuted) {\r\n                    onCommandExecuted();\r\n                }\r\n            }\r\n\r\n        } catch (error) {\r\n            setOutputHistory(prev => [...prev, { text: `Error: ${error.message}`, type: 'error' }]);\r\n        }\r\n    };\r\n\r\n    const handleKeyDown = (e) => {\r\n        if (e.key === 'Enter') {\r\n            executeCommand(currentCommand);\r\n            setCurrentCommand('');\r\n            setHistoryIndex(-1);\r\n        } else if (e.key === 'ArrowUp') {\r\n            e.preventDefault();\r\n            if (commandHistory.length > 0) {\r\n                const newIndex = historyIndex + 1;\r\n                if (newIndex < commandHistory.length) {\r\n                    setHistoryIndex(newIndex);\r\n                    setCurrentCommand(commandHistory[commandHistory.length - 1 - newIndex]);\r\n                }\r\n            }\r\n        } else if (e.key === 'ArrowDown') {\r\n            e.preventDefault();\r\n            if (historyIndex > 0) {\r\n                const newIndex = historyIndex - 1;\r\n                setHistoryIndex(newIndex);\r\n                setCurrentCommand(commandHistory[commandHistory.length - 1 - newIndex]);\r\n            } else if (historyIndex === 0) {\r\n                setHistoryIndex(-1);\r\n                setCurrentCommand('');\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"terminal-container\">\r\n            <div className=\"terminal-header\">\r\n                <span>Terminal</span>\r\n                <button className=\"close-button\" onClick={() => document.querySelector('.terminal-wrapper').style.display = 'none'}>×</button>\r\n            </div>\r\n            <div className=\"terminal-window\" ref={terminalRef}>\r\n                {outputHistory.map((output, index) => (\r\n                    <div key={index} className={`terminal-line ${output.type}`}>\r\n                        {output.text}\r\n                    </div>\r\n                ))}\r\n                <div className=\"terminal-input-line\">\r\n                    <span className=\"prompt\">$</span>\r\n                    <input\r\n                        ref={inputRef}\r\n                        type=\"text\"\r\n                        value={currentCommand}\r\n                        onChange={(e) => setCurrentCommand(e.target.value)}\r\n                        onKeyDown={handleKeyDown}\r\n                        className=\"terminal-input\"\r\n                        spellCheck=\"false\"\r\n                        autoFocus\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Terminal; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}