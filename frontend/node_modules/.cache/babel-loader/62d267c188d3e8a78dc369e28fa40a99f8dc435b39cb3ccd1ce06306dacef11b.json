{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: false // Important for CORS\n});\n\n// Add interceptor to add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  // Ensure content type is set for all requests\n  config.headers['Content-Type'] = 'application/json';\n  return config;\n}, error => Promise.reject(error));\n\n// Auth services\nexport const authService = {\n  login: async (username, password) => {\n    try {\n      // Using XMLHttpRequest to bypass CORS issues\n      return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', `${API_URL}/login`, true);\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.onload = function () {\n          if (this.status >= 200 && this.status < 300) {\n            try {\n              const response = JSON.parse(xhr.responseText);\n              if (response.token) {\n                localStorage.setItem('token', response.token);\n                localStorage.setItem('currentDir', response.currentDir);\n              }\n              resolve(response);\n            } catch (e) {\n              reject(new Error('Invalid response format'));\n            }\n          } else {\n            reject(new Error(xhr.statusText || xhr.responseText || 'Login failed'));\n          }\n        };\n        xhr.onerror = function () {\n          console.error('XHR Error', xhr.statusText);\n          reject(new Error('Network error during login'));\n        };\n        xhr.send(JSON.stringify({\n          username,\n          password\n        }));\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  signup: async (username, password) => {\n    try {\n      // Using XMLHttpRequest as a last resort to bypass CORS issues\n      return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', `${API_URL}/signup`, true);\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.onload = function () {\n          if (this.status >= 200 && this.status < 300) {\n            try {\n              const response = JSON.parse(xhr.responseText);\n              resolve(response);\n            } catch (e) {\n              resolve({\n                status: 'success'\n              }); // Fallback if response isn't JSON\n            }\n          } else {\n            reject(new Error(xhr.statusText || xhr.responseText || 'Registration failed'));\n          }\n        };\n        xhr.onerror = function () {\n          console.error('XHR Error', xhr.statusText);\n          reject(new Error('Network error during registration'));\n        };\n        xhr.send(JSON.stringify({\n          username,\n          password\n        }));\n      });\n    } catch (error) {\n      console.error('Signup error:', error);\n      throw error;\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('currentDir');\n  },\n  isAuthenticated: () => {\n    return !!localStorage.getItem('token');\n  }\n};\n\n// File system services\nexport const fileSystemService = {\n  // List directory contents\n  listFiles: async () => {\n    return await api.get('/ls');\n  },\n  // Get current directory\n  getCurrentDirectory: async () => {\n    return await api.get('/pwd');\n  },\n  // Create directory\n  createDirectory: async folderName => {\n    return await api.post(`/mkdir/${folderName}`);\n  },\n  // Delete directory\n  deleteDirectory: async folderName => {\n    return await api.delete(`/rmdir/${folderName}`);\n  },\n  // Create file\n  createFile: async (fileName, content) => {\n    return await api.post(`/create-file/${fileName}`, content);\n  },\n  // Read file\n  readFile: async fileName => {\n    return await api.get(`/read-file/${fileName}`);\n  },\n  // Edit file\n  editFile: async (fileName, content) => {\n    return await api.put(`/edit-file/${fileName}`, content);\n  },\n  // Append to file\n  appendToFile: async (fileName, content) => {\n    return await api.put(`/append-file/${fileName}`, content);\n  },\n  // Delete file\n  deleteFile: async fileName => {\n    return await api.delete(`/delete-file/${fileName}`);\n  },\n  // Change directory\n  changeDirectory: async path => {\n    const response = await api.post(`/cd/${path}`);\n    if (response.data.currentDir) {\n      localStorage.setItem('currentDir', response.data.currentDir);\n    }\n    return response.data;\n  },\n  // Move up directory\n  moveUpDirectory: async () => {\n    return await api.post('/cd..');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","authService","login","username","password","resolve","xhr","XMLHttpRequest","open","setRequestHeader","onload","status","response","JSON","parse","responseText","setItem","currentDir","e","Error","statusText","onerror","console","send","stringify","signup","logout","removeItem","isAuthenticated","fileSystemService","listFiles","get","getCurrentDirectory","createDirectory","folderName","post","deleteDirectory","delete","createFile","fileName","content","readFile","editFile","put","appendToFile","deleteFile","changeDirectory","path","data","moveUpDirectory"],"sources":["C:/Users/marco/OneDrive/Desktop/GIT_PBL#/FileSystemSimulator/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8080';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: false // Important for CORS\r\n});\r\n\r\n// Add interceptor to add auth token to requests\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    // Ensure content type is set for all requests\r\n    config.headers['Content-Type'] = 'application/json';\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Auth services\r\nexport const authService = {\r\n  login: async (username, password) => {\r\n    try {\r\n      // Using XMLHttpRequest to bypass CORS issues\r\n      return new Promise((resolve, reject) => {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open('POST', `${API_URL}/login`, true);\r\n        xhr.setRequestHeader('Content-Type', 'application/json');\r\n        \r\n        xhr.onload = function() {\r\n          if (this.status >= 200 && this.status < 300) {\r\n            try {\r\n              const response = JSON.parse(xhr.responseText);\r\n              if (response.token) {\r\n                localStorage.setItem('token', response.token);\r\n                localStorage.setItem('currentDir', response.currentDir);\r\n              }\r\n              resolve(response);\r\n            } catch(e) {\r\n              reject(new Error('Invalid response format'));\r\n            }\r\n          } else {\r\n            reject(new Error(xhr.statusText || xhr.responseText || 'Login failed'));\r\n          }\r\n        };\r\n        \r\n        xhr.onerror = function() {\r\n          console.error('XHR Error', xhr.statusText);\r\n          reject(new Error('Network error during login'));\r\n        };\r\n        \r\n        xhr.send(JSON.stringify({ username, password }));\r\n      });\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  signup: async (username, password) => {\r\n    try {\r\n      // Using XMLHttpRequest as a last resort to bypass CORS issues\r\n      return new Promise((resolve, reject) => {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open('POST', `${API_URL}/signup`, true);\r\n        xhr.setRequestHeader('Content-Type', 'application/json');\r\n        \r\n        xhr.onload = function() {\r\n          if (this.status >= 200 && this.status < 300) {\r\n            try {\r\n              const response = JSON.parse(xhr.responseText);\r\n              resolve(response);\r\n            } catch(e) {\r\n              resolve({ status: 'success' });  // Fallback if response isn't JSON\r\n            }\r\n          } else {\r\n            reject(new Error(xhr.statusText || xhr.responseText || 'Registration failed'));\r\n          }\r\n        };\r\n        \r\n        xhr.onerror = function() {\r\n          console.error('XHR Error', xhr.statusText);\r\n          reject(new Error('Network error during registration'));\r\n        };\r\n        \r\n        xhr.send(JSON.stringify({ username, password }));\r\n      });\r\n    } catch (error) {\r\n      console.error('Signup error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('currentDir');\r\n  },\r\n  isAuthenticated: () => {\r\n    return !!localStorage.getItem('token');\r\n  }\r\n};\r\n\r\n// File system services\r\nexport const fileSystemService = {\r\n  // List directory contents\r\n  listFiles: async () => {\r\n    return await api.get('/ls');\r\n  },\r\n  \r\n  // Get current directory\r\n  getCurrentDirectory: async () => {\r\n    return await api.get('/pwd');\r\n  },\r\n  \r\n  // Create directory\r\n  createDirectory: async (folderName) => {\r\n    return await api.post(`/mkdir/${folderName}`);\r\n  },\r\n  \r\n  // Delete directory\r\n  deleteDirectory: async (folderName) => {\r\n    return await api.delete(`/rmdir/${folderName}`);\r\n  },\r\n  \r\n  // Create file\r\n  createFile: async (fileName, content) => {\r\n    return await api.post(`/create-file/${fileName}`, content);\r\n  },\r\n  \r\n  // Read file\r\n  readFile: async (fileName) => {\r\n    return await api.get(`/read-file/${fileName}`);\r\n  },\r\n  \r\n  // Edit file\r\n  editFile: async (fileName, content) => {\r\n    return await api.put(`/edit-file/${fileName}`, content);\r\n  },\r\n  \r\n  // Append to file\r\n  appendToFile: async (fileName, content) => {\r\n    return await api.put(`/append-file/${fileName}`, content);\r\n  },\r\n  \r\n  // Delete file\r\n  deleteFile: async (fileName) => {\r\n    return await api.delete(`/delete-file/${fileName}`);\r\n  },\r\n  \r\n  // Change directory\r\n  changeDirectory: async (path) => {\r\n    const response = await api.post(`/cd/${path}`);\r\n    if (response.data.currentDir) {\r\n      localStorage.setItem('currentDir', response.data.currentDir);\r\n    }\r\n    return response.data;\r\n  },\r\n  \r\n  // Move up directory\r\n  moveUpDirectory: async () => {\r\n    return await api.post('/cd..');\r\n  }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}